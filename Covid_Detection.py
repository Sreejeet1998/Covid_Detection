# -*- coding: utf-8 -*-
"""NBI Image Enhancement.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d035hG_VkJuJinyqy2Ypgiei4A03WbJo
"""

!pip install -q kaggle
from google.colab import files
files.upload()  # Upload kaggle.json here

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d tawsifurrahman/covid19-radiography-database
!unzip covid19-radiography-database.zip -d covid19_xray_data

import os

base_path = 'covid19_xray_data/COVID-19_Radiography_Dataset'
os.listdir(base_path)

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator

base_path = "covid19_xray_data/COVID-19_Radiography_Dataset"
categories = ['COVID', 'Normal', 'Viral Pneumonia']

IMG_SIZE = 128

data = []
labels = []

for category in categories:
    category_path = os.path.join(base_path, category)

    if os.path.exists(category_path):
        for root, _, files in os.walk(category_path):
            for file in files:
                img_path = os.path.join(root, file)

                try:
                    image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load in grayscale
                    if image is not None:
                        image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))
                        data.append(image)
                        labels.append(category)
                    else:
                        print(f"Failed to load image: {img_path}")
                except Exception as e:
                    print(f"Error processing image {img_path}: {e}")
    else:
        print(f"Folder not found: {category_path}")

if not labels:
    raise ValueError("No images were found in the specified directories. "
                     "Please check the 'base_path' and 'categories' variables.")

label_map = {'COVID': 0, 'Normal': 1, 'Viral Pneumonia': 2}
labels_encoded = [label_map[label] for label in labels]
labels_encoded = to_categorical(labels_encoded)

# Normalize and reshape the image data
X = np.array(data).reshape(-1, IMG_SIZE, IMG_SIZE, 1) / 255.0
y = np.array(labels_encoded)

# Split dataset
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization

# Define CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(64, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')  # 3 classes
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Print model summary
model.summary()

# Define data augmentation generator
datagen = ImageDataGenerator(
    rotation_range=10,
    zoom_range=0.1,
    width_shift_range=0.1,
    height_shift_range=0.1
)

# Fit the generator to the training data
datagen.fit(X_train)

# Train the model
history = model.fit(
    datagen.flow(X_train, y_train, batch_size=32),
    epochs=10,
    validation_data=(X_val, y_val)
)

import matplotlib.pyplot as plt

# Plot accuracy
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

model.save("covid19_cnn_model.h5")
print("Model saved as 'covid19_cnn_model.h5'")